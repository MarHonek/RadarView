using System;

namespace OgnAPI.Beacon
{
    /// <summary>
    /// Třída reprezentuje typ adresy.
    /// </summary>
    public enum AddressType
    {
        /// <summary>
        /// Náhodná.
        /// </summary>
        Random = 0,

        /// <summary>
        /// ICAO.
        /// </summary>
        ICAO = 1,

        /// <summary>
        /// FLARM.
        /// </summary>
        FLARM = 2,

        /// <summary>
        /// OGN.
        /// </summary>
        OGN = 3,

        /// <summary>
        /// Nerozeznaný.
        /// </summary>
        Unrecognized = -1
    }

    /// <summary>
    /// Rozšiřující třída pro typ adresy.
    /// </summary>
    public static class AddressTypeExtension
    {

        /// <summary>
        /// Získá typ adresy podle zadaného kódu.
        /// </summary>
        /// <param name="value">Kód adresy.</param>
        /// <returns>Typ adresy.</returns>
        public static AddressType ForValue(int value)
        {
            return Enum.IsDefined(typeof(AddressType), value) ? (AddressType)value : AddressType.Unrecognized;
        }

        /// <summary>
        /// Získá kód typu adresy.
        /// </summary>
        /// <param name="value">Typ adresy.</param>
        /// <returns>Kód typu adresy.</returns>
        public static int GetCode(this AddressType value)
        {
            return (int)value;
        }


        /// <summary>
        /// Získá info o typu adresy.
        /// </summary>
        /// <param name="value">Typ adresy.</param>
        /// <returns>Info o typu adresy.</returns>
        public static string GetInfo(this AddressType value)
        {
	        switch (GetCode(value)) {
		        case 0:
			        return "changing (random) address generated by the device";
		        case 1:
			        return "ICAO address";
		        case 2:
			        return "FLARM hardware address";
		        case 3:
			        return "OGN tracker's hardware address";
		        default:
			        return "Address type unrecognized";
	        }
        }
    }
}
